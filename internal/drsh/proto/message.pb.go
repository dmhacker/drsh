// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.7
// source: proto/message.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SessionMode int32

const (
	SessionMode_MODE_PTY           SessionMode = 0
	SessionMode_MODE_FILE_UPLOAD   SessionMode = 1
	SessionMode_MODE_FILE_DOWNLOAD SessionMode = 2
)

// Enum value maps for SessionMode.
var (
	SessionMode_name = map[int32]string{
		0: "MODE_PTY",
		1: "MODE_FILE_UPLOAD",
		2: "MODE_FILE_DOWNLOAD",
	}
	SessionMode_value = map[string]int32{
		"MODE_PTY":           0,
		"MODE_FILE_UPLOAD":   1,
		"MODE_FILE_DOWNLOAD": 2,
	}
)

func (x SessionMode) Enum() *SessionMode {
	p := new(SessionMode)
	*p = x
	return p
}

func (x SessionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_message_proto_enumTypes[0].Descriptor()
}

func (SessionMode) Type() protoreflect.EnumType {
	return &file_proto_message_proto_enumTypes[0]
}

func (x SessionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionMode.Descriptor instead.
func (SessionMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{0}
}

type PublicMessage_MessageType int32

const (
	PublicMessage_READY            PublicMessage_MessageType = 0 // C->C, S->S, used to test that Redis is delivering messages
	PublicMessage_PING_REQUEST     PublicMessage_MessageType = 1 // C->S, client wants to check if the server is active
	PublicMessage_PING_RESPONSE    PublicMessage_MessageType = 2 // S->C, server responds to the client that it is active
	PublicMessage_SESSION_REQUEST  PublicMessage_MessageType = 3 // C->S, client wants to establish an encrypted session with the server
	PublicMessage_SESSION_RESPONSE PublicMessage_MessageType = 4 // S->C, server responds if it is able to set up a session
)

// Enum value maps for PublicMessage_MessageType.
var (
	PublicMessage_MessageType_name = map[int32]string{
		0: "READY",
		1: "PING_REQUEST",
		2: "PING_RESPONSE",
		3: "SESSION_REQUEST",
		4: "SESSION_RESPONSE",
	}
	PublicMessage_MessageType_value = map[string]int32{
		"READY":            0,
		"PING_REQUEST":     1,
		"PING_RESPONSE":    2,
		"SESSION_REQUEST":  3,
		"SESSION_RESPONSE": 4,
	}
)

func (x PublicMessage_MessageType) Enum() *PublicMessage_MessageType {
	p := new(PublicMessage_MessageType)
	*p = x
	return p
}

func (x PublicMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_message_proto_enumTypes[1].Descriptor()
}

func (PublicMessage_MessageType) Type() protoreflect.EnumType {
	return &file_proto_message_proto_enumTypes[1]
}

func (x PublicMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicMessage_MessageType.Descriptor instead.
func (PublicMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{0, 0}
}

type SessionMessage_MessageType int32

const (
	SessionMessage_READY                SessionMessage_MessageType = 0 // C->C, S->S, used to test that Redis is delivering messages
	SessionMessage_EXIT                 SessionMessage_MessageType = 1 // C->S, S->C, sent by either party to indicate session is closed
	SessionMessage_HEARTBEAT_CLIENT     SessionMessage_MessageType = 2 // C->S, empty message to signal that client is still active
	SessionMessage_HEARTBEAT_SERVER     SessionMessage_MessageType = 3 // S->C, empty message to signal that server is still active
	SessionMessage_PTY_INPUT            SessionMessage_MessageType = 4 // C->S, client is sending commands to the server's PTY
	SessionMessage_PTY_WINCH            SessionMessage_MessageType = 5 // C->S, client wants to adjust the size of the server's PTY
	SessionMessage_PTY_OUTPUT           SessionMessage_MessageType = 6 // S->C, server is sending output from its PTY
	SessionMessage_FILE_TRANSFER        SessionMessage_MessageType = 7 // S->C, C->S, the party sending a file uses this message to transfer data
	SessionMessage_FILE_TRANSFER_FINISH SessionMessage_MessageType = 8 // S->C, C->S, the party sending a file indicates that they are done
)

// Enum value maps for SessionMessage_MessageType.
var (
	SessionMessage_MessageType_name = map[int32]string{
		0: "READY",
		1: "EXIT",
		2: "HEARTBEAT_CLIENT",
		3: "HEARTBEAT_SERVER",
		4: "PTY_INPUT",
		5: "PTY_WINCH",
		6: "PTY_OUTPUT",
		7: "FILE_TRANSFER",
		8: "FILE_TRANSFER_FINISH",
	}
	SessionMessage_MessageType_value = map[string]int32{
		"READY":                0,
		"EXIT":                 1,
		"HEARTBEAT_CLIENT":     2,
		"HEARTBEAT_SERVER":     3,
		"PTY_INPUT":            4,
		"PTY_WINCH":            5,
		"PTY_OUTPUT":           6,
		"FILE_TRANSFER":        7,
		"FILE_TRANSFER_FINISH": 8,
	}
)

func (x SessionMessage_MessageType) Enum() *SessionMessage_MessageType {
	p := new(SessionMessage_MessageType)
	*p = x
	return p
}

func (x SessionMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_message_proto_enumTypes[2].Descriptor()
}

func (SessionMessage_MessageType) Type() protoreflect.EnumType {
	return &file_proto_message_proto_enumTypes[2]
}

func (x SessionMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionMessage_MessageType.Descriptor instead.
func (SessionMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{2, 0}
}

// A PublicMessage is sent without encryption between any server and client.
// They are essentially ephmereal messages that require minimal or no state to be kept on the server.
// Note that anyone on the Internet can sniff these messages, so no sensitive information should
// be transferred here.
type PublicMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All messages
	Type   PublicMessage_MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=drsh.proto.PublicMessage_MessageType" json:"type,omitempty"`
	Sender string                    `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// Session messages
	SessionKeyPart    []byte      `protobuf:"bytes,3,opt,name=session_key_part,json=sessionKeyPart,proto3" json:"session_key_part,omitempty"`                   // Sent by both C&S to establish a shared key
	SessionMode       SessionMode `protobuf:"varint,4,opt,name=session_mode,json=sessionMode,proto3,enum=drsh.proto.SessionMode" json:"session_mode,omitempty"` // Client requests that the session be of this mode
	HandshakeUser     string      `protobuf:"bytes,5,opt,name=handshake_user,json=handshakeUser,proto3" json:"handshake_user,omitempty"`                        // Client requests that the session be tied to this user account
	HandshakeFilename string      `protobuf:"bytes,6,opt,name=handshake_filename,json=handshakeFilename,proto3" json:"handshake_filename,omitempty"`            // Client requests that the session prepare this remote file for transfer
	SessionCreated    bool        `protobuf:"varint,7,opt,name=session_created,json=sessionCreated,proto3" json:"session_created,omitempty"`                    // Server indicates whether or not a session was created
	SessionError      string      `protobuf:"bytes,8,opt,name=session_error,json=sessionError,proto3" json:"session_error,omitempty"`                           // Server can optionally provide a error explaining why session cannot be created
	SessionId         string      `protobuf:"bytes,9,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                    // Server provides a valid session ID if one was created
	HandshakeMotd     string      `protobuf:"bytes,10,opt,name=handshake_motd,json=handshakeMotd,proto3" json:"handshake_motd,omitempty"`                       // Server provides a MOTD to be displayed to the client
}

func (x *PublicMessage) Reset() {
	*x = PublicMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicMessage) ProtoMessage() {}

func (x *PublicMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicMessage.ProtoReflect.Descriptor instead.
func (*PublicMessage) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{0}
}

func (x *PublicMessage) GetType() PublicMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return PublicMessage_READY
}

func (x *PublicMessage) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *PublicMessage) GetSessionKeyPart() []byte {
	if x != nil {
		return x.SessionKeyPart
	}
	return nil
}

func (x *PublicMessage) GetSessionMode() SessionMode {
	if x != nil {
		return x.SessionMode
	}
	return SessionMode_MODE_PTY
}

func (x *PublicMessage) GetHandshakeUser() string {
	if x != nil {
		return x.HandshakeUser
	}
	return ""
}

func (x *PublicMessage) GetHandshakeFilename() string {
	if x != nil {
		return x.HandshakeFilename
	}
	return ""
}

func (x *PublicMessage) GetSessionCreated() bool {
	if x != nil {
		return x.SessionCreated
	}
	return false
}

func (x *PublicMessage) GetSessionError() string {
	if x != nil {
		return x.SessionError
	}
	return ""
}

func (x *PublicMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PublicMessage) GetHandshakeMotd() string {
	if x != nil {
		return x.HandshakeMotd
	}
	return ""
}

// An EncryptedMessage represents some ciphertext transferred between server and client. This
// is mainly intended for protecting sessions.
type EncryptedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ciphertext []byte `protobuf:"bytes,1,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Nonce      []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *EncryptedMessage) Reset() {
	*x = EncryptedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedMessage) ProtoMessage() {}

func (x *EncryptedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedMessage.ProtoReflect.Descriptor instead.
func (*EncryptedMessage) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{1}
}

func (x *EncryptedMessage) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *EncryptedMessage) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

// A SessionMessage is sent with encryption between a server session and corresponding client.
// The SessionMessage doesn't carry any encryption parameters itself; instead, it's assumed to be wrapped in
// an EncryptedMessage. SessionMessages implement core logic associated with client actions, such as
// transferring files, sending commands to a server as a user, etc.
type SessionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All messages
	Type   SessionMessage_MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=drsh.proto.SessionMessage_MessageType" json:"type,omitempty"`
	Sender string                     `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// Exit messages
	ExitNormal bool   `protobuf:"varint,3,opt,name=exit_normal,json=exitNormal,proto3" json:"exit_normal,omitempty"` // Sending party specifies if they are exiting normally
	ExitError  string `protobuf:"bytes,4,opt,name=exit_error,json=exitError,proto3" json:"exit_error,omitempty"`     // Sending party specifies that they are exiting because of an error
	// PTY messages
	PtyPayload    []byte `protobuf:"bytes,5,opt,name=pty_payload,json=ptyPayload,proto3" json:"pty_payload,omitempty"`           // used by PTY_INPUT, PTY_OUTPUT messages
	PtyDimensions uint64 `protobuf:"varint,6,opt,name=pty_dimensions,json=ptyDimensions,proto3" json:"pty_dimensions,omitempty"` // used by PTY_WINCH message
	// File messages
	FilePayload []byte `protobuf:"bytes,13,opt,name=file_payload,json=filePayload,proto3" json:"file_payload,omitempty"` // used by FILE_TRANSFER message
}

func (x *SessionMessage) Reset() {
	*x = SessionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionMessage) ProtoMessage() {}

func (x *SessionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionMessage.ProtoReflect.Descriptor instead.
func (*SessionMessage) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{2}
}

func (x *SessionMessage) GetType() SessionMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return SessionMessage_READY
}

func (x *SessionMessage) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SessionMessage) GetExitNormal() bool {
	if x != nil {
		return x.ExitNormal
	}
	return false
}

func (x *SessionMessage) GetExitError() string {
	if x != nil {
		return x.ExitError
	}
	return ""
}

func (x *SessionMessage) GetPtyPayload() []byte {
	if x != nil {
		return x.PtyPayload
	}
	return nil
}

func (x *SessionMessage) GetPtyDimensions() uint64 {
	if x != nil {
		return x.PtyDimensions
	}
	return 0
}

func (x *SessionMessage) GetFilePayload() []byte {
	if x != nil {
		return x.FilePayload
	}
	return nil
}

var File_proto_message_proto protoreflect.FileDescriptor

var file_proto_message_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x64, 0x72, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9c, 0x04, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x64, 0x72, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x72, 0x73, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x6d, 0x6f, 0x74,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x4d, 0x6f, 0x74, 0x64, 0x22, 0x68, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x04,
	0x22, 0x48, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x0e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x64, 0x72,
	0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x69, 0x74, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x74, 0x79, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa9, 0x01, 0x0a,
	0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x58, 0x49, 0x54, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x45, 0x41, 0x52, 0x54,
	0x42, 0x45, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x54, 0x59, 0x5f, 0x57, 0x49, 0x4e, 0x43, 0x48, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x54, 0x59, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x07, 0x12, 0x18,
	0x0a, 0x14, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x08, 0x2a, 0x49, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41,
	0x44, 0x10, 0x02, 0x42, 0x17, 0x5a, 0x15, 0x2e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x64, 0x72, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_message_proto_rawDescOnce sync.Once
	file_proto_message_proto_rawDescData = file_proto_message_proto_rawDesc
)

func file_proto_message_proto_rawDescGZIP() []byte {
	file_proto_message_proto_rawDescOnce.Do(func() {
		file_proto_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_message_proto_rawDescData)
	})
	return file_proto_message_proto_rawDescData
}

var file_proto_message_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_message_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_message_proto_goTypes = []interface{}{
	(SessionMode)(0),                // 0: drsh.proto.SessionMode
	(PublicMessage_MessageType)(0),  // 1: drsh.proto.PublicMessage.MessageType
	(SessionMessage_MessageType)(0), // 2: drsh.proto.SessionMessage.MessageType
	(*PublicMessage)(nil),           // 3: drsh.proto.PublicMessage
	(*EncryptedMessage)(nil),        // 4: drsh.proto.EncryptedMessage
	(*SessionMessage)(nil),          // 5: drsh.proto.SessionMessage
}
var file_proto_message_proto_depIdxs = []int32{
	1, // 0: drsh.proto.PublicMessage.type:type_name -> drsh.proto.PublicMessage.MessageType
	0, // 1: drsh.proto.PublicMessage.session_mode:type_name -> drsh.proto.SessionMode
	2, // 2: drsh.proto.SessionMessage.type:type_name -> drsh.proto.SessionMessage.MessageType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_message_proto_init() }
func file_proto_message_proto_init() {
	if File_proto_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_message_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_message_proto_goTypes,
		DependencyIndexes: file_proto_message_proto_depIdxs,
		EnumInfos:         file_proto_message_proto_enumTypes,
		MessageInfos:      file_proto_message_proto_msgTypes,
	}.Build()
	File_proto_message_proto = out.File
	file_proto_message_proto_rawDesc = nil
	file_proto_message_proto_goTypes = nil
	file_proto_message_proto_depIdxs = nil
}
